# Config file for @PROJECT_NAME@ package
# 
# It defines the following variables:
#  @PROJECT_NAME@_INCLUDE_DIRS	- include directories
#  @PROJECT_NAME@_LIBRARIES		- libraries to link against
#  @PROJECT_NAME@_DEP_LIBRARIES	- dependency libraries to link against if you are linking statically
#  @PROJECT_NAME@_FOUND			- found flag variable

if(NOT CMAKE_CURRENT_LIST_DIR)
	get_filename_component(CMAKE_CURRENT_LIST_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
endif()

get_filename_component(@PROJECT_NAME@_INSTALL_ROOT "${CMAKE_CURRENT_LIST_DIR}/@ACPL_INSTALL_DIR_REL2CMAKE@" ABSOLUTE)

if("${CMAKE_SIZEOF_VOID_P}" MATCHES "8")
	set(@PROJECT_NAME@_LIB_DIR_SUFFIX "64")
else()
    set(@PROJECT_NAME@_LIB_DIR_SUFFIX "")
endif()

include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Utils.cmake")

if (MSVC)
	set(@PROJECT_NAME@_DEP_LIBRARIES "winmm" "ws2_32")
else()
	find_package(Threads REQUIRED)
	set(@PROJECT_NAME@_DEP_LIBRARIES "rt" "${CMAKE_THREAD_LIBS_INIT}")
endif()

if(IS_DIRECTORY "${@PROJECT_NAME@_INSTALL_ROOT}/include/@PROJECT_NAME_LC@")
    set(@PROJECT_NAME@_INCLUDE_DIRS "${@PROJECT_NAME@_INSTALL_ROOT}/include")
endif()

find_library(@PROJECT_NAME@_LIBRARY_DEBUG "@PROJECT_NAME@@ACPL_LIB_DEBUG_SUFFIX@" PATHS "${@PROJECT_NAME@_INSTALL_ROOT}/lib${@PROJECT_NAME@_LIB_DIR_SUFFIX}")
find_library(@PROJECT_NAME@_LIBRARY_RELEASE "@PROJECT_NAME@" PATHS "${@PROJECT_NAME@_INSTALL_ROOT}/lib${@PROJECT_NAME@_LIB_DIR_SUFFIX}")

unset(@PROJECT_NAME@_LIBRARIES CACHE)
if(@PROJECT_NAME@_LIBRARY_DEBUG)
    set(@PROJECT_NAME@_LIBRARIES "${@PROJECT_NAME@_LIBRARIES}" debug "${@PROJECT_NAME@_LIBRARY_DEBUG}")
endif()
if(@PROJECT_NAME@_LIBRARY_RELEASE)
    set(@PROJECT_NAME@_LIBRARIES "${@PROJECT_NAME@_LIBRARIES}" optimized "${@PROJECT_NAME@_LIBRARY_RELEASE}")
endif()
unset(@PROJECT_NAME@_LIBRARY_DEBUG CACHE)
unset(@PROJECT_NAME@_LIBRARY_RELEASE CACHE)

if(@PROJECT_NAME@_INCLUDE_DIRS AND @PROJECT_NAME@_LIBRARIES)
	set(@PROJECT_NAME@_FOUND TRUE)
else()
	set(@PROJECT_NAME@_FOUND FALSE)
endif()

if(@PROJECT_NAME@_FOUND)
	if(NOT @PROJECT_NAME@_FIND_QUIETLY)
		message(STATUS "Found @PROJECT_NAME@ in ${@PROJECT_NAME@_INSTALL_ROOT}/lib${@PROJECT_NAME@_LIB_DIR_SUFFIX}")
	endif()
else()
    if(@PROJECT_NAME@_FIND_REQUIRED)
		message(FATAL_ERROR "Could not find @PROJECT_NAME@")
	endif()
endif()

set(@PROJECT_NAME@_INCLUDE_DIRS "${@PROJECT_NAME@_INCLUDE_DIRS}" CACHE PATHS "@PROJECT_NAME@ include directory paths")
set(@PROJECT_NAME@_LIBRARIES "${@PROJECT_NAME@_LIBRARIES}" CACHE PATHS "@PROJECT_NAME@ library paths")

unset(@PROJECT_NAME@_LIB_DIR_SUFFIX)
unset(@PROJECT_NAME@_INSTALL_ROOT)
